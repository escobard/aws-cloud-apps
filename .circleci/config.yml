docker_cimg: &docker_cimg
  docker:
    - image: cimg/python:3.9.1

version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-ecs: circleci/aws-ecs@2.0.0

parameters:
  is_pull_request:
    type: boolean
    default: false
  target_branch:
    type: string
    default: ""
workflows:
  automated-tests:
    unless:
      or:
        - equal: [ true, << pipeline.parameters.is_pull_request >> ]
        - equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - client-unit-tests
      - api-unit-tests
      - database-unit-tests
      - integration-tests:
          requires:
            - client-unit-tests
            - api-unit-tests
            - database-unit-tests
      - e2e-tests:
          requires:
            - integration-tests
  build-and-deploy-cloud-apps:
    when:
      or:
        - equal: [ main, << pipeline.git.branch >> ]
    jobs:
# disable until the database is re-created on AWS - disabled to save costs
#      - data-migrations:
#          context: cloud-apps-2023
#          name: 'Run Database migrations'
      - build-and-push-ui-image:
          context: cloud-apps-2023
          name: 'Build and push UI Docker image'
      - build-and-push-api-image:
          context: cloud-apps-2023
          name: 'Build and push API Docker image'
jobs:
  client-unit-tests:
    working_directory: ~/client
    docker:
      - image: cimg/node:20.9.0 # lock in version of node to prevent dependency issues
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "client/package.json" }}
      - run:
          name: "Install client dev-only dependencies"
          command: "cd client && npm i -D"
      - save_cache:
          key: dependency-cache-{{ checksum "client/package.json" }}
          paths:
            - ./node_modules
      - run:
          name: "Run unit tests"
          command: "cd client && npm run test:coverage -- -u"
  ## TODO - use parameters and have a single job script for ui/api unit tests
  api-unit-tests:
    working_directory: ~/api
    docker:
      - image: cimg/node:20.9.0 # lock in version of node to prevent dependency issues
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "api/package.json" }}
      - run:
          name: "Install API dev-only dependencies"
          command: "cd api && npm i -D"
      - save_cache:
          key: dependency-cache-{{ checksum "api/package.json" }}
          paths:
            - ./node_modules
      - run:
          name: "Run unit tests"
          command: "cd api && npm run test:coverage"
  database-unit-tests:
    working_directory: ~/database
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Install Docker dependencies"
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
      - run:
          name: "Run migrations and unit tests"
          command: |
            docker-compose -f data-tests.yaml up --exit-code-from data_tests
  integration-tests:
    working_directory: ~/integration_tests
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Install Docker dependencies"
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
      - run:
          name: "Run integration tests"
          command: |
            docker-compose -f integration-tests.yaml up --exit-code-from integration
  e2e-tests:
    working_directory: ~/e2e_tests
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Install Docker dependencies"
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
      - run:
          name: "Run end-to-end tests"
          command: |
            docker-compose -f e2e-tests.yaml up --exit-code-from e2e
  data-migrations:
    working_directory: ~/database
    docker:
      - image: cimg/node:20.9.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "database/package.json" }}
      - run:
          name: "Install API dev-only dependencies"
          command: "cd database && npm install --only=prod"
      - save_cache:
          key: dependency-cache-{{ checksum "database/package.json" }}
          paths:
            - ./node_modules
      - run:
          name: "Run data migrations"
          command: "cd database && npm run migrate-up"
  build-and-push-ui-image:
    <<: *docker_cimg
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: 'cloud-apps-ui'
          path: './client'
          dockerfile: 'Dockerfile'
          tag: 'latest,v<< pipeline.number >>'
          extra-build-args: '--build-arg NEXT_PUBLIC_GRAPHQL_API'
      - aws-ecs/update-service:
          cluster-name: 'cloud-apps-2023'
          container-image-name-updates: 'container=latest,tag=latest'
          family: 'cloud-apps-ui'
          service-name: 'cloud-apps-ui'
  build-and-push-api-image:
    <<: *docker_cimg
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: 'cloud-apps-api'
          path: './api'
          dockerfile: 'Dockerfile'
          tag: 'latest,v<< pipeline.number >>'
          extra-build-args: '--build-arg DB_HOST --build-arg DB_PORT --build-arg DB_NAME --build-arg DB_USER --build-arg DB_PASSWORD'
      - aws-ecs/update-service:
          cluster-name: 'cloud-apps-2023'
          container-image-name-updates: 'container=latest,tag=latest'
          family: 'cloud-apps-api'
          service-name: 'cloud-apps-api'